require("stringutil")
require("vue/__tests__/e2eUtils")
require("@vue/shared")
require("vue")

describe('e2e: Transition', function()
  mockWarn()
  local  = setupPuppeteer()
  local baseUrl = nil
  local duration = 50
  local buffer = 5
  local transitionFinish = function(time = duration)
    if time == nil then
      time=duration
    end
    timeout(time + buffer)
  end
  
  local classWhenTransitionStart = function()
    page():evaluate(function()
      ():click()
      return Promise:resolve():tsvar_then(function()
        return ().className:split('%s+')
      end
      )
    end
    )
  end
  
  beforeEach(function()
    
  end
  )
  describe('transition with v-if', function()
    test('basic transition', function()
      
      expect():toBe('<div class="test">content</div>')
      expect():toStrictEqual({'test', 'v-leave-active', 'v-leave-from'})
      expect():toStrictEqual({'test', 'v-leave-active', 'v-leave-to'})
      expect():toBe('<!--v-if-->')
      expect():toStrictEqual({'test', 'v-enter-active', 'v-enter-from'})
      expect():toStrictEqual({'test', 'v-enter-active', 'v-enter-to'})
      expect():toBe('<div class="test">content</div>')
    end
    , E2E_TIMEOUT)
    test('named transition', function()
      
      expect():toBe('<div class="test">content</div>')
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-from'})
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-to'})
      expect():toBe('<!--v-if-->')
      expect():toStrictEqual({'test', 'test-enter-active', 'test-enter-from'})
      expect():toStrictEqual({'test', 'test-enter-active', 'test-enter-to'})
      expect():toBe('<div class="test">content</div>')
    end
    , E2E_TIMEOUT)
    test('custom transition classes', function()
      
      expect():toBe('<div class="test">content</div>')
      expect():toStrictEqual({'test', 'bye-active', 'bye-from'})
      expect():toStrictEqual({'test', 'bye-active', 'bye-to'})
      expect():toBe('<!--v-if-->')
      expect():toStrictEqual({'test', 'hello-active', 'hello-from'})
      expect():toStrictEqual({'test', 'hello-active', 'hello-to'})
      expect():toBe('<div class="test">content</div>')
    end
    , E2E_TIMEOUT)
    test('transition with dynamic name', function()
      
      expect():toBe('<div class="test">content</div>')
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-from'})
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-to'})
      expect():toBe('<!--v-if-->')
      expect():toStrictEqual({'test', 'changed-enter-active', 'changed-enter-from'})
      expect():toStrictEqual({'test', 'changed-enter-active', 'changed-enter-to'})
      expect():toBe('<div class="test">content</div>')
    end
    , E2E_TIMEOUT)
    test('transition events without appear', function()
      local beforeLeaveSpy = jest:fn()
      local onLeaveSpy = jest:fn()
      local afterLeaveSpy = jest:fn()
      local beforeEnterSpy = jest:fn()
      local onEnterSpy = jest:fn()
      local afterEnterSpy = jest:fn()
      expect():toBe('<div class="test">content</div>')
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-from'})
      expect(beforeLeaveSpy):toBeCalled()
      expect(onLeaveSpy):toBeCalled()
      expect(afterLeaveSpy).tsvar_not:toBeCalled()
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-to'})
      expect(afterLeaveSpy).tsvar_not:toBeCalled()
      expect():toBe('<!--v-if-->')
      expect(afterLeaveSpy):toBeCalled()
      expect():toStrictEqual({'test', 'test-enter-active', 'test-enter-from'})
      expect(beforeEnterSpy):toBeCalled()
      expect(onEnterSpy):toBeCalled()
      expect(afterEnterSpy).tsvar_not:toBeCalled()
      expect():toStrictEqual({'test', 'test-enter-active', 'test-enter-to'})
      expect(afterEnterSpy).tsvar_not:toBeCalled()
      expect():toBe('<div class="test">content</div>')
      expect(afterEnterSpy):toBeCalled()
    end
    , E2E_TIMEOUT)
    test('onEnterCancelled', function()
      local enterCancelledSpy = jest:fn()
      expect():toBe('<!--v-if-->')
      expect():toStrictEqual({'test', 'test-enter-active', 'test-enter-from'})
      expect():toStrictEqual({'test', 'test-enter-active', 'test-enter-to'})
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-from'})
      expect(enterCancelledSpy):toBeCalled()
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-to'})
      expect():toBe('<!--v-if-->')
    end
    )
    test('transition on appear', function()
      local appearClass = nil
      expect(appearClass):toStrictEqual({'test', 'test-appear-active', 'test-appear-from'})
      expect():toStrictEqual({'test', 'test-appear-active', 'test-appear-to'})
      expect():toBe('<div class="test">content</div>')
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-from'})
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-to'})
      expect():toBe('<!--v-if-->')
      expect():toStrictEqual({'test', 'test-enter-active', 'test-enter-from'})
      expect():toStrictEqual({'test', 'test-enter-active', 'test-enter-to'})
      expect():toBe('<div class="test">content</div>')
    end
    , E2E_TIMEOUT)
    test('transition events with appear', function()
      local onLeaveSpy = jest:fn()
      local onEnterSpy = jest:fn()
      local onAppearSpy = jest:fn()
      local beforeLeaveSpy = jest:fn()
      local beforeEnterSpy = jest:fn()
      local beforeAppearSpy = jest:fn()
      local afterLeaveSpy = jest:fn()
      local afterEnterSpy = jest:fn()
      local afterAppearSpy = jest:fn()
      local appearClass = nil
      expect(appearClass):toStrictEqual({'test', 'test-appear-active', 'test-appear-from'})
      expect(beforeAppearSpy):toBeCalled()
      expect(onAppearSpy):toBeCalled()
      expect(afterAppearSpy).tsvar_not:toBeCalled()
      expect():toStrictEqual({'test', 'test-appear-active', 'test-appear-to'})
      expect(afterAppearSpy).tsvar_not:toBeCalled()
      expect():toBe('<div class="test">content</div>')
      expect(afterAppearSpy):toBeCalled()
      expect(beforeEnterSpy).tsvar_not:toBeCalled()
      expect(onEnterSpy).tsvar_not:toBeCalled()
      expect(afterEnterSpy).tsvar_not:toBeCalled()
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-from'})
      expect(beforeLeaveSpy):toBeCalled()
      expect(onLeaveSpy):toBeCalled()
      expect(afterLeaveSpy).tsvar_not:toBeCalled()
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-to'})
      expect(afterLeaveSpy).tsvar_not:toBeCalled()
      expect():toBe('<!--v-if-->')
      expect(afterLeaveSpy):toBeCalled()
      expect():toStrictEqual({'test', 'test-enter-active', 'test-enter-from'})
      expect(beforeEnterSpy):toBeCalled()
      expect(onEnterSpy):toBeCalled()
      expect(afterEnterSpy).tsvar_not:toBeCalled()
      expect():toStrictEqual({'test', 'test-enter-active', 'test-enter-to'})
      expect(afterEnterSpy).tsvar_not:toBeCalled()
      expect():toBe('<div class="test">content</div>')
      expect(afterEnterSpy):toBeCalled()
    end
    , E2E_TIMEOUT)
    test('css: false', function()
      local onBeforeEnterSpy = jest:fn()
      local onEnterSpy = jest:fn()
      local onAfterEnterSpy = jest:fn()
      local onBeforeLeaveSpy = jest:fn()
      local onLeaveSpy = jest:fn()
      local onAfterLeaveSpy = jest:fn()
      expect():toBe('<div class="test">content</div>')
      expect(onBeforeLeaveSpy):toBeCalled()
      expect(onLeaveSpy):toBeCalled()
      expect(onAfterLeaveSpy):toBeCalled()
      expect():toBe('<!--v-if-->')
      expect(onBeforeEnterSpy):toBeCalled()
      expect(onEnterSpy):toBeCalled()
      expect(onAfterEnterSpy):toBeCalled()
      expect():toBe('<div class="test">content</div>')
    end
    , E2E_TIMEOUT)
    test('no transition detected', function()
      
      expect():toBe('<div>content</div>')
      expect():toStrictEqual({'noop-leave-active', 'noop-leave-from'})
      expect():toBe('<!--v-if-->')
      expect():toStrictEqual({'noop-enter-active', 'noop-enter-from'})
      expect():toBe('<div class="">content</div>')
    end
    , E2E_TIMEOUT)
    test('animations', function()
      
      expect():toBe('<div>content</div>')
      expect():toStrictEqual({'test-anim-leave-active', 'test-anim-leave-from'})
      expect():toStrictEqual({'test-anim-leave-active', 'test-anim-leave-to'})
      expect():toBe('<!--v-if-->')
      expect():toStrictEqual({'test-anim-enter-active', 'test-anim-enter-from'})
      expect():toStrictEqual({'test-anim-enter-active', 'test-anim-enter-to'})
      expect():toBe('<div class="">content</div>')
    end
    , E2E_TIMEOUT)
    test('explicit transition type', function()
      
      expect():toBe('<div>content</div>')
      expect():toStrictEqual({'test-anim-long-leave-active', 'test-anim-long-leave-from'})
      expect():toStrictEqual({'test-anim-long-leave-active', 'test-anim-long-leave-to'})
      expect():toStrictEqual({'test-anim-long-leave-active', 'test-anim-long-leave-to'})
      expect():toBe('<!--v-if-->')
      expect():toStrictEqual({'test-anim-long-enter-active', 'test-anim-long-enter-from'})
      expect():toStrictEqual({'test-anim-long-enter-active', 'test-anim-long-enter-to'})
      expect():toStrictEqual({'test-anim-long-enter-active', 'test-anim-long-enter-to'})
      expect():toBe('<div class="">content</div>')
    end
    , E2E_TIMEOUT)
    test('transition on SVG elements', function()
      
      expect():toBe('<circle cx="0" cy="0" r="10" class="test"></circle>')
      local svgTransitionStart = function()
        page():evaluate(function()
          ():click()
          return Promise:resolve():tsvar_then(function()
            return ():split('%s+')
          end
          )
        end
        )
      end
      
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-from'})
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-to'})
      expect():toBe('<!--v-if-->')
      expect():toStrictEqual({'test', 'test-enter-active', 'test-enter-from'})
      expect():toStrictEqual({'test', 'test-enter-active', 'test-enter-to'})
      expect():toBe('<circle cx="0" cy="0" r="10" class="test"></circle>')
    end
    , E2E_TIMEOUT)
    test('custom transition higher-order component', function()
      
      expect():toBe('<div class="test">content</div>')
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-from'})
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-to'})
      expect():toBe('<!--v-if-->')
      expect():toStrictEqual({'test', 'test-enter-active', 'test-enter-from'})
      expect():toStrictEqual({'test', 'test-enter-active', 'test-enter-to'})
      expect():toBe('<div class="test">content</div>')
    end
    , E2E_TIMEOUT)
    test('transition on child components with empty root node', function()
      
      expect():toBe('<!--v-if-->')
      expect():toStrictEqual({'test', 'test-enter-active', 'test-enter-from'})
      expect():toStrictEqual({'test', 'test-enter-active', 'test-enter-to'})
      expect():toBe('<div class="test">two</div>')
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-from'})
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-to'})
      expect():toBe('<!--v-if-->')
    end
    , E2E_TIMEOUT)
  end
  )
  describe('transition with v-show', function()
    test('named transition with v-show', function()
      
      expect():toBe('<div class="test">content</div>')
      expect():toBe(true)
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-from'})
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-to'})
      expect():toBe(false)
      expect():toStrictEqual({'test', 'test-enter-active', 'test-enter-from'})
      expect():toStrictEqual({'test', 'test-enter-active', 'test-enter-to'})
      expect():toBe('<div class="test" style="">content</div>')
    end
    , E2E_TIMEOUT)
    test('transition events with v-show', function()
      local beforeLeaveSpy = jest:fn()
      local onLeaveSpy = jest:fn()
      local afterLeaveSpy = jest:fn()
      local beforeEnterSpy = jest:fn()
      local onEnterSpy = jest:fn()
      local afterEnterSpy = jest:fn()
      expect():toBe('<div class="test">content</div>')
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-from'})
      expect(beforeLeaveSpy):toBeCalled()
      expect(onLeaveSpy):toBeCalled()
      expect(afterLeaveSpy).tsvar_not:toBeCalled()
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-to'})
      expect(afterLeaveSpy).tsvar_not:toBeCalled()
      expect():toBe(false)
      expect(afterLeaveSpy):toBeCalled()
      expect():toStrictEqual({'test', 'test-enter-active', 'test-enter-from'})
      expect(beforeEnterSpy):toBeCalled()
      expect(onEnterSpy):toBeCalled()
      expect(afterEnterSpy).tsvar_not:toBeCalled()
      expect():toStrictEqual({'test', 'test-enter-active', 'test-enter-to'})
      expect(afterEnterSpy).tsvar_not:toBeCalled()
      expect():toBe('<div class="test" style="">content</div>')
      expect(afterEnterSpy):toBeCalled()
    end
    , E2E_TIMEOUT)
    test('onLeaveCancelled (v-show only)', function()
      local onLeaveCancelledSpy = jest:fn()
      expect():toBe('<div class="test">content</div>')
      expect():toBe(true)
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-from'})
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-to'})
      expect():toStrictEqual({'test', 'test-enter-active', 'test-enter-from'})
      expect(onLeaveCancelledSpy):toBeCalled()
      expect():toStrictEqual({'test', 'test-enter-active', 'test-enter-to'})
      expect():toBe('<div class="test" style="">content</div>')
    end
    , E2E_TIMEOUT)
    test('transition on appear with v-show', function()
      local appearClass = nil
      expect(appearClass):toStrictEqual({'test', 'test-appear-active', 'test-appear-from'})
      expect():toStrictEqual({'test', 'test-appear-active', 'test-appear-to'})
      expect():toBe('<div class="test">content</div>')
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-from'})
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-to'})
      expect():toBe(false)
      expect():toStrictEqual({'test', 'test-enter-active', 'test-enter-from'})
      expect():toStrictEqual({'test', 'test-enter-active', 'test-enter-to'})
      expect():toBe('<div class="test" style="">content</div>')
    end
    , E2E_TIMEOUT)
  end
  )
  test('warn when used on multiple elements', function()
    createApp({render=function()
      return h(Transition, nil, {default=function()
        {h('div'), h('div')}
      end
      })
    end
    }):mount(document:createElement('div'))
    expect('<transition> can only be used on a single element or component'):toHaveBeenWarned()
  end
  , E2E_TIMEOUT)
  describe('explicit durations', function()
    test('single value', function()
      
      expect():toBe('<div class="test">content</div>')
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-from'})
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-to'})
      expect():toBe('<!--v-if-->')
      expect():toStrictEqual({'test', 'test-enter-active', 'test-enter-from'})
      expect():toStrictEqual({'test', 'test-enter-active', 'test-enter-to'})
      expect():toBe('<div class="test">content</div>')
    end
    , E2E_TIMEOUT)
    test('enter with explicit durations', function()
      
      expect():toBe('<div class="test">content</div>')
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-from'})
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-to'})
      expect():toBe('<!--v-if-->')
      expect():toStrictEqual({'test', 'test-enter-active', 'test-enter-from'})
      expect():toStrictEqual({'test', 'test-enter-active', 'test-enter-to'})
      expect():toBe('<div class="test">content</div>')
    end
    , E2E_TIMEOUT)
    test('leave with explicit durations', function()
      
      expect():toBe('<div class="test">content</div>')
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-from'})
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-to'})
      expect():toBe('<!--v-if-->')
      expect():toStrictEqual({'test', 'test-enter-active', 'test-enter-from'})
      expect():toStrictEqual({'test', 'test-enter-active', 'test-enter-to'})
      expect():toBe('<div class="test">content</div>')
    end
    , E2E_TIMEOUT)
    test('separate enter and leave', function()
      
      expect():toBe('<div class="test">content</div>')
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-from'})
      expect():toStrictEqual({'test', 'test-leave-active', 'test-leave-to'})
      expect():toBe('<!--v-if-->')
      expect():toStrictEqual({'test', 'test-enter-active', 'test-enter-from'})
      expect():toStrictEqual({'test', 'test-enter-active', 'test-enter-to'})
      expect():toBe('<div class="test">content</div>')
    end
    , E2E_TIMEOUT)
    test:todo('warn invalid durations')
  end
  )
end
)