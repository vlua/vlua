require("@vue/runtime-test")
require("runtime-core/src/vnode")

describe('renderer: teleport', function()
  test('should work', function()
    local target = nodeOps:createElement('div')
    local root = nodeOps:createElement('div')
    render(h(function()
      {h(Teleport, {to=target}, h('div', 'teleported')), h('div', 'root')}
    end
    ), root)
    expect(serializeInner(root)):toMatchInlineSnapshot()
    expect(serializeInner(target)):toMatchInlineSnapshot()
  end
  )
  test('should update target', function()
    local targetA = nodeOps:createElement('div')
    local targetB = nodeOps:createElement('div')
    local target = ref(targetA)
    local root = nodeOps:createElement('div')
    render(h(function()
      {h(Teleport, {to=target.value}, h('div', 'teleported')), h('div', 'root')}
    end
    ), root)
    expect(serializeInner(root)):toMatchInlineSnapshot()
    expect(serializeInner(targetA)):toMatchInlineSnapshot()
    expect(serializeInner(targetB)):toMatchInlineSnapshot()
    target.value = targetB
    expect(serializeInner(root)):toMatchInlineSnapshot()
    expect(serializeInner(targetA)):toMatchInlineSnapshot()
    expect(serializeInner(targetB)):toMatchInlineSnapshot()
  end
  )
  test('should update children', function()
    local target = nodeOps:createElement('div')
    local root = nodeOps:createElement('div')
    local children = ref({h('div', 'teleported')})
    render(h(Teleport, {to=target}, children.value), root)
    expect(serializeInner(target)):toMatchInlineSnapshot()
    children.value = {}
    expect(serializeInner(target)):toMatchInlineSnapshot()
    children.value = {createVNode(Text, nil, 'teleported')}
    expect(serializeInner(target)):toMatchInlineSnapshot()
  end
  )
  test('should remove children when unmounted', function()
    local target = nodeOps:createElement('div')
    local root = nodeOps:createElement('div')
    render(h(function()
      {h(Teleport, {to=target}, h('div', 'teleported')), h('div', 'root')}
    end
    ), root)
    expect(serializeInner(target)):toMatchInlineSnapshot()
    render(nil, root)
    expect(serializeInner(target)):toBe('')
  end
  )
  test('multiple teleport with same target', function()
    local target = nodeOps:createElement('div')
    local root = nodeOps:createElement('div')
    render(h('div', {h(Teleport, {to=target}, h('div', 'one')), h(Teleport, {to=target}, 'two')}), root)
    expect(serializeInner(root)):toMatchInlineSnapshot()
    expect(serializeInner(target)):toMatchInlineSnapshot()
    render(h('div', {h(Teleport, {to=target}, {h('div', 'one'), h('div', 'two')}), h(Teleport, {to=target}, 'three')}), root)
    expect(serializeInner(target)):toMatchInlineSnapshot()
    render(h('div', {nil, h(Teleport, {to=target}, 'three')}), root)
    expect(serializeInner(root)):toMatchInlineSnapshot()
    expect(serializeInner(target)):toMatchInlineSnapshot()
    render(h('div', {h(Teleport, {to=target}, {h('div', 'one'), h('div', 'two')}), h(Teleport, {to=target}, 'three')}), root)
    expect(serializeInner(root)):toMatchInlineSnapshot()
    expect(serializeInner(target)):toMatchInlineSnapshot()
    render(h('div', {h(Teleport, {to=target}, {h('div', 'one'), h('div', 'two')}), nil}), root)
    expect(serializeInner(root)):toMatchInlineSnapshot()
    expect(serializeInner(target)):toMatchInlineSnapshot()
  end
  )
  test('disabled', function()
    local target = nodeOps:createElement('div')
    local root = nodeOps:createElement('div')
    local renderWithDisabled = function(disabled)
      return h(Fragment, {h(Teleport, {to=target, disabled=disabled}, h('div', 'teleported')), h('div', 'root')})
    end
    
    render(renderWithDisabled(false), root)
    expect(serializeInner(root)):toMatchInlineSnapshot()
    expect(serializeInner(target)):toMatchInlineSnapshot()
    render(renderWithDisabled(true), root)
    expect(serializeInner(root)):toMatchInlineSnapshot()
    expect(serializeInner(target)):toBe()
    render(renderWithDisabled(false), root)
    expect(serializeInner(root)):toMatchInlineSnapshot()
    expect(serializeInner(target)):toMatchInlineSnapshot()
  end
  )
  test('moving teleport while enabled', function()
    local target = nodeOps:createElement('div')
    local root = nodeOps:createElement('div')
    render(h(Fragment, {h(Teleport, {to=target}, h('div', 'teleported')), h('div', 'root')}), root)
    expect(serializeInner(root)):toMatchInlineSnapshot()
    expect(serializeInner(target)):toMatchInlineSnapshot()
    render(h(Fragment, {h('div', 'root'), h(Teleport, {to=target}, h('div', 'teleported'))}), root)
    expect(serializeInner(root)):toMatchInlineSnapshot()
    expect(serializeInner(target)):toMatchInlineSnapshot()
    render(h(Fragment, {h(Teleport, {to=target}, h('div', 'teleported')), h('div', 'root')}), root)
    expect(serializeInner(root)):toMatchInlineSnapshot()
    expect(serializeInner(target)):toMatchInlineSnapshot()
  end
  )
  test('moving teleport while disabled', function()
    local target = nodeOps:createElement('div')
    local root = nodeOps:createElement('div')
    render(h(Fragment, {h(Teleport, {to=target, disabled=true}, h('div', 'teleported')), h('div', 'root')}), root)
    expect(serializeInner(root)):toMatchInlineSnapshot()
    expect(serializeInner(target)):toBe('')
    render(h(Fragment, {h('div', 'root'), h(Teleport, {to=target, disabled=true}, h('div', 'teleported'))}), root)
    expect(serializeInner(root)):toMatchInlineSnapshot()
    expect(serializeInner(target)):toBe('')
    render(h(Fragment, {h(Teleport, {to=target, disabled=true}, h('div', 'teleported')), h('div', 'root')}), root)
    expect(serializeInner(root)):toMatchInlineSnapshot()
    expect(serializeInner(target)):toBe('')
  end
  )
end
)